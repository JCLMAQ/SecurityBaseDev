/** * file upload handler * @param request {HTTPRequest} http request * @param response {HTTPResponse} http response */function fileUpload(request, response) {  try {    var counter = 1;    var nameTemp;    var files = [];    var uploadFolder = Folder('/PROJECT/database/data/tmp/');    var result = [];    var newName;    var myBinaryStream;    // create upload folder if not existing    if (!uploadFolder.exists) {      uploadFolder.create();    }    // create file instances    for (var i = 0; i < request.parts.length; i++) {      files.push(new File(uploadFolder.path + request.parts[i].fileName.replace(/\s/g, '_')));      // create result object      result[i] = {};      result[i].name = request.parts[i].fileName;      result[i].type = request.parts[i].mediaType;      result[i].size = request.parts[i].size;    }    // write file content    for (var i = 0; i < files.length; i++) {      counter = 1;      if (!files[i].exists) {        myBinaryStream = BinaryStream(files[i], 'Write');        myBinaryStream.putBlob(request.parts[i].asBlob);        myBinaryStream.close();      } else {        while (files[i].exists) {          nameTemp = files[i].name.replace(/\s/g, '_');          files[i] = new File(uploadFolder.path + files[i].nameNoExt.replace(/\s/g, '_') + counter + '.' + files[i].extension);          newName = files[i].name;          if (files[i].exists) {            files[i] = new File(uploadFolder.path + nameTemp);          }          counter++;        }        myBinaryStream = BinaryStream(files[i], 'Write');        myBinaryStream.putBlob(request.parts[i].asBlob);        myBinaryStream.close();        result[i].name = newName;      }    }    result = JSON.stringify(result);    // add response header    response.contentType = 'application/json';    return result;  } catch (e) {    console.log(e.stack);    return e;  }}